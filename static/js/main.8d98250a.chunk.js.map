{"version":3,"sources":["icons/human.svg","icons/social_media.svg","icons/brain2.svg","icons/arrow.svg","utils/importFile.js","utils/constants.js","utils/util.js","components/StatusForm.jsx","components/ResultCard.jsx","App.js","index.js"],"names":["module","exports","a","Papa","fetchCsv","response","parse","data","fetch","reader","body","getReader","read","result","decoder","TextDecoder","decode","value","csv","logProbsOf","word_freq_table","total_ct_term","log_probs","word","Math","log","logLikelihoodOf","input_data","log_probs_table","prior","logLikelihood","i","length","StatusForm","props","onSubmit","e","preventDefault","state","status","setState","error","handleStatus","onChange","target","renderValidate","className","style","minWidth","padding","this","fontSize","textAlign","TextArea","resize","marginTop","placeholder","type","React","Component","ResultCard","renderExplanation","Fragment","lineHeight","depressed_LL","nondepressed_LL","renderResult","depressed_bool","Segment","color","clearing","Button","onClick","opened","console","SegmentGroup","App","status_array","words","split","toLowerCase","replace","parseStatus","calculateEstimate","depressed_log_probs","nondepressed_log_probs","min","getData","then","shift","depressed_ct_total","nondepressed_ct_total","depressed_freq_table","nondepressed_freq_table","row","j","depressed","total_ct","freq_table","nondepressed","populateCounts","backgroundColor","marginLeft","marginRight","alignContent","Grid","Row","columns","Column","fontWeight","Image","src","brain","social_media","human","arrow","maxWidth","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d98250a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/human.2743a5cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/social_media.1639ff01.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain2.ff55f7e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.29496eec.svg\";","import Papa from 'papaparse';\nimport { filename } from './constants';\n\nexport default async function GetData() {\n    const response = Papa.parse(await fetchCsv()).data;\n    return response;\n}\n\nasync function fetchCsv() {\n    const response = await fetch(`/mh_classifier/data/${filename}`);\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = await decoder.decode(result.value);\n    return csv;\n}","export const filename = \"mh_dataset.csv\";\n\nexport const depressed_prior = 0.5;\nexport const nondepressed_prior = 0.5;\nexport const bias_towards_nondepressed = -7;\n\nexport const header_msg = \"copy/paste a social media post from a friend that you're concerned about to see if they might be feeling depressed or not\";\nexport const depressed_msg = \"It seems like they are not feeling well lately. It would be a good idea to reach out to them and give them support.\";\nexport const nondepressed_msg = \"It seems like they are doing okay, but make sure to cherish them. :)\";\nexport const explanation = \"The predictor uses a Naive Bayes Maximum Likelihood Estimation algorithm to predict whether the text you input has more evidence towards being written by someone experiencing mental distress vs not. Basically, I take a data set of facebook statuses labelled to be from depressed people vs. non depressed people, look at the words they contain and count them (assuming that the order of words does not matter and that each word is probabilistically independent of one another), to get the conditional probability of that word occuring if the text was from someone who was depressed vs. not depressed and store this into tables. Then, I read in the user's inputted status and keep track of and count the words that appeared in each of the depressed vs. non depressed tables, and find the probabilty of the sequence of words based on the depressed vs non- depressed tables. I do so by taking advantage of the fact that the probability of events can be chained by multiplying them if we assume they are independent events, (in other words, the probability of seeing the words 'I am depressed' is the probability of seeing the words P('I' )x P('am') x P('depressed') ). To make things easier, I use a rule where the product of a set of terms is the same as the sum of the log of each of those terms. I build up this sum of log probabilities according to the probabilities of seeing those words in the depressed case vs. nondepressed case. Then, I compare those two sums (the log likelihood of seeing that particular set of words given they are depressed vs. nondepressed) and choose the higher one. I bias the data towards the status being nondepressed by adding a prior probability that is weighted heavier towards non-depressed, which makes you require more evidence for the status being depressesd compared to non-depressed to account for the fact that it easier to detect negative emotion vs. neutral and happy emotion. The dataset I created was very weak and small (scraped from inspirational quotes for non-depressed and testimonials of depressed people for depressed statuses), so the tool exists more of a proof of concept rather than a completely robust tool.\";\nexport const depressed_LL_msg = \"Log likelihood of text showing emotional distress: \";\nexport const nondepressed_LL_msg = \"Log likelihood of text showing positivity: \";\n","\nexport const populateCounts = (data) => {\n  let depressed_ct_total = 0.0;\n  let nondepressed_ct_total = 0.0;\n  let depressed_freq_table = {};\n  let nondepressed_freq_table = {};\n\n  for (let i = 0; i < data.length; i++) {\n    const row = data[i];\n    const words = row[0].split(\" \");\n    for (let j = 0; j < words.length; j++) {\n      const word = words[j].toLowerCase().replace(/[^a-z]/, '');\n      if (row[1] === 'Yes') {\n        if (!(word in depressed_freq_table)) {\n          depressed_freq_table[word] = 1.0\n        }\n        else {\n          depressed_freq_table[word] += 1.0\n        }\n        depressed_ct_total += 1.0;\n      } else if (row[1] === 'No') {\n        if (!(word in nondepressed_freq_table)) {\n          nondepressed_freq_table[word] = 1.0\n        }\n        else {\n          nondepressed_freq_table[word] += 1.0\n        }\n        nondepressed_ct_total += 1.0;\n      }\n    }\n  }\n  return {\n    depressed: {total_ct: depressed_ct_total, freq_table: depressed_freq_table},\n    nondepressed: {total_ct: nondepressed_ct_total, freq_table: nondepressed_freq_table}\n  };\n};\n\nexport const parseStatus = (status) => {\n  let words = status.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toLowerCase().replace(/[^a-z]/, '');\n  } \n  return words;\n};\n\nexport const logProbsOf = (word_freq_table, total_ct_term) => {\n  let log_probs = {}\n  for (const word in word_freq_table) {\n    log_probs[word] = Math.log(word_freq_table[word] / total_ct_term);\n  }\n  return log_probs;\n}\n\nexport const logLikelihoodOf = (input_data, log_probs_table, prior) => {\n  let logLikelihood = 0.0;\n  for (let i = 0; i < input_data.length; i++) {\n    const word = input_data[i];\n    if (word in log_probs_table) {\n      logLikelihood += log_probs_table[word];\n    }\n  } \n  return logLikelihood + Math.log(prior);\n\n}\n\n","import React from 'react';\nimport { TextArea } from 'semantic-ui-react';\n\n\nclass StatusForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { status: '', error: false };\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.status.length > 20) {\n      this.setState({error: false });\n      this.props.handleStatus(this.state.status);\n    } else {\n      this.setState({error: true });\n      this.props.handleStatus(null);\n    }\n }\n\n  onChange = (e) => {\n    this.setState({ status: e.target.value });\n  }\n\n  renderValidate = () => {\n    if (this.state.error) {\n      return (\n        <div className='ui header red'> Please enter more than 20 characters for better accuracy. </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className='ui card centered container' style={{minWidth: '600px',  padding: '20px'}}>\n        <form className=\"ui form clearing\" onSubmit={this.onSubmit}>\n          <div className=\"field\" style={{fontSize: '20pt', textAlign: 'center'}}>\n            <label>Social Media Post</label>\n            <TextArea\n              style={{ resize: 'none', marginTop: '30px' }}\n              placeholder=\"Paste your friend's social media post.\"\n              onChange={this.onChange}\n            />\n          </div>\n          <div>{this.renderValidate()}</div>\n          <button style={{fontSize: '20pt'}} className=\"ui button green right floated\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default StatusForm;","import React from 'react';\nimport { Segment, SegmentGroup, Button } from 'semantic-ui-react';\n\nimport { depressed_msg, depressed_LL_msg,\nnondepressed_msg, nondepressed_LL_msg,\nexplanation,\n} from '../utils/constants';\n\nclass ResultCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {opened: false};\n  }\n\n  renderExplanation = () => {\n    return (\n      <React.Fragment style={{fontSize: '16pt', lineHeight: '1.4'}}>\n        <br/>\n        {explanation}\n        <br/>\n        <br/>\n        {depressed_LL_msg} <b>{this.props.depressed_LL}</b>\n        <br/>\n        {nondepressed_LL_msg} <b>{this.props.nondepressed_LL}</b>\n      </React.Fragment>\n    );\n  }\n\n\n\n  renderResult = () => {\n    if (this.props.depressed_bool === null) {\n      return (\n        <Segment style={{fontSize: '20pt', color: 'rgba(0,0,0,.4)'}}>\n          <b>Awaiting submission to get back results ...</b>\n        </Segment>\n      );\n    }\n    else if (this.props.depressed_bool) {\n      return (\n        <React.Fragment> \n          <Segment className='red' style={{fontSize: '20pt', lineHeight: '1.6'}}> \n          <b>{depressed_msg}</b>\n          <br/>\n          </Segment>\n          <Segment textAlign={\"center\"} clearing>\n            <br/>\n            <Button className='ui basic orange' onClick={() => this.setState({opened: !this.state.opened})}>\n              See Explanation\n              </Button>\n              <br/>\n            <div style={{textAlign: 'left', padding: '10px'}}>{this.state.opened && this.renderExplanation()}</div>\n          </Segment>\n       </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <Segment className='green' style={{fontSize: '20pt', lineHeight: '1.4'}}>\n            <b>{nondepressed_msg}</b>\n            <br/>\n          </Segment>\n          <Segment textAlign={\"center\"} clearing>\n            <br/>\n            <Button className='ui basic orange' onClick={() => this.setState({opened: !this.state.opened})}>\n              See Explanation\n            </Button>\n            <br/>\n            <div style={{textAlign: 'left', padding: '10px'}}>{this.state.opened && this.renderExplanation()}</div>\n          </Segment>\n       </React.Fragment>\n      );\n    }\n  }\n\n  render() {\n    console.log(this.state.opened);\n    return (\n      <SegmentGroup className='ui container'>\n        {this.renderResult()}\n      </SegmentGroup>\n    );\n  }\n}\n\nexport default ResultCard;","import React from 'react';\nimport { Grid, Image } from 'semantic-ui-react';\n\n\nimport human from './icons/human.svg';\nimport social_media from './icons/social_media.svg';\nimport brain from './icons/brain2.svg';\nimport arrow from './icons/arrow.svg';\n\n\nimport {\n  depressed_prior, nondepressed_prior,\n  header_msg, bias_towards_nondepressed,\n} from './utils/constants.js';\n\nimport getData from './utils/importFile';\nimport { \n  populateCounts,\n  parseStatus,\n  logProbsOf,\n  logLikelihoodOf,\n} from './utils/util';\n\nimport StatusForm from './components/StatusForm.jsx';\nimport ResultCard from './components/ResultCard.jsx';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      depressed_log_probs: null, depressed_LL: null,\n      nondepressed_log_probs: null, nondepressed_LL: null,\n      depressed_bool: null };\n\n  }\n\n  componentDidMount(){\n    getData().then((result) => {\n      result.shift();\n      const data = populateCounts(result);\n      const {\n        depressed,\n        nondepressed,\n      } = data;\n      const depressed_log_probs = logProbsOf(depressed.freq_table, depressed.total_ct);\n      const nondepressed_log_probs = logProbsOf(nondepressed.freq_table, nondepressed.total_ct);\n      this.setState({ depressed_log_probs, nondepressed_log_probs });\n    });\n  }\n  \n  handleStatus = (status) => {\n    if (status === null) {\n      this.setState({ depressed_bool: null, depressed_LL: null, nondepressed_LL: null });\n    } else {\n      const status_array = parseStatus(status);\n      const depressed_bool = this.calculateEstimate(status_array);\n      this.setState({ depressed_bool });\n    }\n  }\n\n  calculateEstimate = (status_array) => {\n\n    const depressed_LL = logLikelihoodOf(\n      status_array, this.state.depressed_log_probs, depressed_prior\n    );\n    const nondepressed_LL = logLikelihoodOf(\n      status_array, this.state.nondepressed_log_probs, nondepressed_prior\n    );\n    this.setState({ depressed_LL, nondepressed_LL });\n    const bestGuess = Math.min(depressed_LL, nondepressed_LL + bias_towards_nondepressed);\n    if (bestGuess === depressed_LL) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: 'tomato', marginLeft: '10px', marginRight: '10px', alignContent: 'center' }}>\n        <Grid>\n        <Grid.Row columns={1}>\n            <Grid.Column>\n            <div className='ui container header centered' style={{ marginTop: '50px' }}>\n              <h1 style={{textAlign: 'right', fontWeight: 'lighter', color: 'rgba(255,255,255,1)', fontSize: '20pt'}}\n              >\n                ( by vinh ton )\n                </h1>\n                <Image className=\"ui large image\" src={brain} style={{minWidth: '50px', marginTop: '30px'}}/>\n              <h1 style={{ fontWeight: 'lighter', color: 'rgba(255,255,255,1)', marginTop: '0px', fontSize: '36pt' }}>\n               peer mental health predictor tool\n               </h1>\n            </div>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n            <div className='ui container centered header' style={{ marginTop: '30px' }}>\n            <h1 style={{ fontWeight: 'lighter',color: 'rgba(255,255,255,.60)', fontSize: '20pt', textAlign: 'left' }}>instructions:</h1>\n            <h1 style={{ fontWeight: 'lighter',color: 'rgba(255,255,255,.60)', fontSize: '20pt', textAlign: 'left', marginTop: '-12px' }}>{header_msg}</h1>\n            </div>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={4} style={{ marginTop: '50px'}}>\n            <Grid.Column></Grid.Column>\n            <Grid.Column>\n            <Image className=\"ui container large image\" src={social_media} style={{minWidth: '200px'}}/>\n              </Grid.Column>\n              <Grid.Column>\n              <Image className=\"ui container large image\" src={human} style={{minWidth: '200px'}}/>\n            </Grid.Column>\n            <Grid.Column></Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1} style={{ marginTop: '50px'}}>\n            <Grid.Column >\n              <StatusForm handleStatus={this.handleStatus} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <Image className=\"ui image centered\" src={arrow} style={{maxWidth: '50px'}}/>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row columns={1}>\n            <Grid.Column>\n              <ResultCard\n                  depressed_bool={this.state.depressed_bool}\n                  depressed_LL={this.state.depressed_LL}\n                  nondepressed_LL={this.state.nondepressed_LL}\n                />\n            </Grid.Column>\n          </Grid.Row>\n            <Grid.Row columns={1} style={{ marginTop: '200px'}}>\n              <Grid.Column>\n                <div className='ui container centered header'>\n                  <a href='https://vinhton.com'>\n                  <button className=\"ui button inverted\" style={{fontSize: '20pt'}}>\n                    see more projects\n                  </button>\n                  </a>\n                </div>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={1} style={{ marginTop: '50px'}}>\n              <Grid.Column>\n                <h2 style={{ fontWeight: 'lighter', color: 'rgba(255,255,255,.70)', fontSize: '20pt', }}>\n                  disclaimer:\n                </h2>\n                <h2 style={{ fontWeight: 'lighter', color: 'rgba(255,255,255,.70)', fontSize: '20pt', marginTop: '-12px' }}>\n                  this tool is not meant to replace formal mental health diagnosis but rather an initial step in giving your friend support\n                </h2>\n                <h2 style={{ fontWeight: 'lighter', color: 'rgba(255,255,255,.70)', fontSize: '20pt' }}>\n                </h2>\n              </Grid.Column>\n            </Grid.Row>\n        </Grid>   \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}